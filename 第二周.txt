题目 01- 请你用自己的语言向我介绍 Java 运行时数据区（内存区域）
* 堆、虚拟机栈、本地方法栈、方法区（永久代、元空间）、运行时常量池（字符串常量池）、直接内存

堆：线程共享，里面存放对象实例，是垃圾回收的主要区域。堆划分为年轻代和老年代，年轻代分为Eden区和surviour区
虚拟机栈：每个线程私有。程序的运行，方法的调用对应着栈帧的压入弹出。栈帧中存放着方法调用需要的局部变量表和操作数等信息
本地方法栈：程序执行native方法的地方，与虚拟机栈类似
方法区：存放类字节码文件编译后的类的元信息
运行时常量池：存放字符串常量（代码编译前用双引号包围的字符串）
直接内存：能提高IO读写性能的区域，减少了程序将数据从非直接内存传输到直接内存的操作

* 为什么堆内存要分年轻代和老年代？
程序运行过程中有大量的对象实例产生和消亡，而大部分对象实例都是朝生夕灭的。如果能把这些对象集中管理起来，能减少查找垃圾的时间。
因此划分出年轻代用于管理这种朝生夕灭的对象。
一个对象如果长时间存在不被回收，那么它将会变得难以回收。因此划分出老年代用于管理这种对象。

题目 02- 描述一个 Java 对象的生命周期

解释一个对象的创建过程
1、分配内存空间
2、初始化零值
3、设置对象头的信息，如hashcode，GC年龄等
4、执行init方法

解释一个对象的内存分配
指针碰撞：内存连续，一般用于年轻代
空闲列表：内存不连续，一般用于老年代

解释一个对象的销毁过程
1、被标记为垃圾对象
2、回收前执行一次finalize（若有），可用finalize自救一次
3、没有finalize则销毁

对象的 2 种访问方式是什么？
1、句柄
2、直接指针

为什么需要内存担保？
避免年轻代空间不够，内存担保可以让新对象进入年轻代，老对象进入老年代

题目 03- 垃圾收集算法有哪些？垃圾收集器有哪些？他们的特点是什么？

ParNew 收集器：并行，用于年轻代，使用标记复制算法
ParallelScavenge 收集器：并行，用于年轻代，使用标记复制算法，关注可控的吞吐量
ParallelOld 收集器：并行，用于老年代，使用标记整理算法，关注吞吐量
CMS 收集器：并行，老年代，使用标记清除算法，减少STW时间。分为初始标记、并发标记、重新标记、并发清除阶段
G1 收集器：并行，整堆，把内存区域划分为一个个Region。分为初始标记、并发标记、最终标记、筛选回收阶段